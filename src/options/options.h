#ifndef _LEVEL_DB_XY_OPTIONS_H_
#define _LEVEL_DB_XY_OPTIONS_H_

#include "comparator.h"
#include "env.h"
#include "cache.h"
#include "filter_policy.h"
#include "compression.h"
#include "snapshot.h"

namespace ns_options {

// Options to control the behavior of a database (passed to DB::Open)
struct Options {
    Options();

    ns_comparator::Comparator const *comparator;
    // If true, the database will be created if it is missing.
    bool create_if_missing{false};
    // If true, an error is raised if the database already exists.
    bool error_if_exists{false};

    bool paranoid_checks{false};

    // Use the specified object to interact with the environment,
    // e.g. to read/write files, schedule background work, etc.
    // Default: Env::Default()
    ns_env::Env *env;

    // Any internal progress/error information generated by the db will
    // be written to info_log if it is non-null, or to a file stored
    // in the same directory as the DB contents if info_log is null.
    ns_env::Logger *info_log{nullptr};

    uint64_t write_buffer_size{4 * 1024 * 1024};

    int32_t max_open_files{1000};

    ns_cache::Cache *block_cache{nullptr};

    uint64_t block_size{4 * 1024};

    int32_t block_restart_interval{16};

    uint64_t max_file_size{2 * 1024 * 1024};
    // Compress blocks using the specified compression algorithm.  This
    // parameter can be changed dynamically.
    //
    // Default: kSnappyCompression, which gives lightweight but fast
    // compression.
    //
    // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
    //    ~200-500MB/s compression
    //    ~400-800MB/s decompression
    // Note that these speeds are significantly faster than most
    // persistent storage speeds, and therefore it is typically never
    // worth switching to kNoCompression.  Even if the input data is
    // incompressible, the kSnappyCompression implementation will
    // efficiently detect that and will switch to uncompressed mode.
    ns_compression::CompressionType compression{ns_compression::kSnappyCompression};
    // Compression level for zstd.
    // Currently only the range [-5,22] is supported. Default is 1.
    int32_t zstd_compression_level{1};

    bool reuse_logs{false};
    // If non-null, use the specified filter policy to reduce disk reads.
    // Many applications will benefit from passing the result of
    // NewBloomFilterPolicy() here.
    ns_filter_policy::FilterPolicy const *filter_policy{nullptr};
};

// Options that control read operations
struct ReadOptions {
    // If true, all data read from underlying storage will be
    // verified against corresponding checksums.
    bool verify_checksums{false};
    // Should the data read for this iteration be cached in memory?
    // Callers may wish to set this field to false for bulk scans.
    bool fill_cache{true};
    // If "snapshot" is non-null, read as of the supplied snapshot
    // (which must belong to the DB that is being read and which must
    // not have been released).  If "snapshot" is null, use an implicit
    // snapshot of the state at the beginning of this read operation.
    ns_snapshot::Snapshot *snapshot{nullptr};
};

// Options that control write operations
struct WriteOptions {
    WriteOptions() = default;
    // If true, the write will be flushed from the operating system
    // buffer cache (by calling WritableFile::Sync()) before the write
    // is considered complete.  If this flag is true, writes will be
    // slower.
    //
    // If this flag is false, and the machine crashes, some recent
    // writes may be lost.  Note that if it is just the process that
    // crashes (i.e., the machine does not reboot), no writes will be
    // lost even if sync==false.
    //
    // In other words, a DB write with sync==false has similar
    // crash semantics as the "write()" system call.  A DB write
    // with sync==true has similar crash semantics to a "write()"
    // system call followed by "fsync()".
    bool sync{false};
};

} // ns_options

#endif